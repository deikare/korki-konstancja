
konwerter_16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000186  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000acd  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000888  00000000  00000000  00000d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047d  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000305  00000000  00000000  00001e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000212e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	35 d0       	rcall	.+106    	; 0x12e <main>
  c4:	5e c0       	rjmp	.+188    	; 0x182 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <insertInAscendingManner>:
void insertInAscendingManner(int tab[], int length, int insertedValue) {
    //1. - ustaliæ miejsce wstawienia insertedValue
    //2. - przesun¹æ dalsze o 1
    //3. - wstawiæ insertedValue
    int iterator;
    for (iterator = 0; iterator < length; ++iterator) {
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	25 c0       	rjmp	.+74     	; 0x118 <insertInAscendingManner+0x50>
        if (tab[iterator] > insertedValue) { //krok 1
  ce:	d9 01       	movw	r26, r18
  d0:	aa 0f       	add	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	a8 0f       	add	r26, r24
  d6:	b9 1f       	adc	r27, r25
  d8:	ed 91       	ld	r30, X+
  da:	fc 91       	ld	r31, X
  dc:	4e 17       	cp	r20, r30
  de:	5f 07       	cpc	r21, r31
  e0:	cc f4       	brge	.+50     	; 0x114 <insertInAscendingManner+0x4c>
            for (int iteratorPushFurther = length - 2; iteratorPushFurther >= iterator; iteratorPushFurther--) // krok 2
  e2:	62 50       	subi	r22, 0x02	; 2
  e4:	71 09       	sbc	r23, r1
  e6:	12 c0       	rjmp	.+36     	; 0x10c <insertInAscendingManner+0x44>
                tab[iteratorPushFurther + 1] = tab[iteratorPushFurther];
  e8:	db 01       	movw	r26, r22
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	aa 0f       	add	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	a8 0f       	add	r26, r24
  f2:	b9 1f       	adc	r27, r25
  f4:	fb 01       	movw	r30, r22
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	01 90       	ld	r0, Z+
 100:	f0 81       	ld	r31, Z
 102:	e0 2d       	mov	r30, r0
 104:	ed 93       	st	X+, r30
 106:	fc 93       	st	X, r31
    //2. - przesun¹æ dalsze o 1
    //3. - wstawiæ insertedValue
    int iterator;
    for (iterator = 0; iterator < length; ++iterator) {
        if (tab[iterator] > insertedValue) { //krok 1
            for (int iteratorPushFurther = length - 2; iteratorPushFurther >= iterator; iteratorPushFurther--) // krok 2
 108:	61 50       	subi	r22, 0x01	; 1
 10a:	71 09       	sbc	r23, r1
 10c:	62 17       	cp	r22, r18
 10e:	73 07       	cpc	r23, r19
 110:	5c f7       	brge	.-42     	; 0xe8 <insertInAscendingManner+0x20>
 112:	05 c0       	rjmp	.+10     	; 0x11e <insertInAscendingManner+0x56>
void insertInAscendingManner(int tab[], int length, int insertedValue) {
    //1. - ustaliæ miejsce wstawienia insertedValue
    //2. - przesun¹æ dalsze o 1
    //3. - wstawiæ insertedValue
    int iterator;
    for (iterator = 0; iterator < length; ++iterator) {
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	26 17       	cp	r18, r22
 11a:	37 07       	cpc	r19, r23
 11c:	c4 f2       	brlt	.-80     	; 0xce <insertInAscendingManner+0x6>
            for (int iteratorPushFurther = length - 2; iteratorPushFurther >= iterator; iteratorPushFurther--) // krok 2
                tab[iteratorPushFurther + 1] = tab[iteratorPushFurther];
            break;
        }        
    }
    tab[iterator] = insertedValue;
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	fc 01       	movw	r30, r24
 124:	e2 0f       	add	r30, r18
 126:	f3 1f       	adc	r31, r19
 128:	51 83       	std	Z+1, r21	; 0x01
 12a:	40 83       	st	Z, r20
 12c:	08 95       	ret

0000012e <main>:
int main(void)
{
    //convertDecTo16(convertedValue, base, tab, length);
    //result = sumRecursive(tab2, amountOfElements);
    
    insertInAscendingManner(tab3, length3, insertedValue);
 12e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <length3>
 13a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <length3+0x1>
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	c2 df       	rcall	.-124    	; 0xc8 <insertInAscendingManner>
    
    insertedValue = 0;
 144:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    insertInAscendingManner(tab3, length3, insertedValue);
 14c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <length3>
 150:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <length3+0x1>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	b5 df       	rcall	.-150    	; 0xc8 <insertInAscendingManner>
    insertedValue = 17;
 15e:	81 e1       	ldi	r24, 0x11	; 17
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    insertInAscendingManner(tab3, length3, insertedValue);
 16a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <length3>
 16e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <length3+0x1>
 172:	41 e1       	ldi	r20, 0x11	; 17
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	a6 df       	rcall	.-180    	; 0xc8 <insertInAscendingManner>
    return 0;
}
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
